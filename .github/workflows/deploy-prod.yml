name: Build and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:

    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: set up jdk 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: build gacha-api
        run: ./gradlew :gacha-api:bootJar

      - name: build lotto-api
        run: ./gradlew :lotto-api:bootJar

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: docker build for gacha-api
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gacha-api ./gacha-api
          docker push ${{ secrets.DOCKER_USERNAME }}/gacha-api

      - name: docker build for lotto-api
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/lotto-api ./lotto-api
          docker push ${{ secrets.DOCKER_USERNAME }}/lotto-api

      - name: deploy gacha-api to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/gacha-api
            existing_container=$(docker ps -a -q -f name=gacha-api)
            if [ -n "$existing_container" ]; then
              sudo docker rm -f $existing_container
              sleep 3 
            fi
            sudo docker run -d --name gacha-api --network host -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SSL_KEY_STORE=${{ secrets.SSL_KEY_STORE }} \
              -e SSL_KEY_STORE_TYPE=${{ secrets.SSL_KEY_STORE_TYPE }} \
              -e SSL_KEY_STORE_PASSWORD=${{ secrets.SSL_KEY_STORE_PASSWORD }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e OAUTH_GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }} \
              -e OAUTH_GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }} \
              -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
              -e KAKAO_REDIRECT_URL=${{ secrets.KAKAO_REDIRECT_URL }} \
              -e KAKAO_ADMIN_KEY=${{ secrets.KAKAO_ADMIN_KEY }} \
              -e DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL_GACHA }} \
              -e DATASOURCE_URL="${{ secrets.DATASOURCE_URL }}" \
              -e DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} \
              -e DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} \
              -v /var/log/gacha-api:/log \
              ${{ secrets.DOCKER_USERNAME }}/gacha-api:latest

      - name: deploy lotto-api to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/lotto-api
            existing_container=$(docker ps -a -q -f name=lotto-api)
            if [ -n "$existing_container" ]; then
              sudo docker rm -f $existing_container
              sleep 3 
            fi
              sudo docker run -d --name lotto-api --network host -p 8081:8081 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL_LOTTO }} \
              -e DATASOURCE_URL="${{ secrets.DATASOURCE_URL }}" \
              -e DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} \
              -e DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} \
              -v /var/log/lotto-api:/log \
              ${{ secrets.DOCKER_USERNAME }}/lotto-api:latest
