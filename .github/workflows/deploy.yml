name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:

    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: set up jdk 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: set yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-dev.yml
        env:
          server.ssl.key-store: ${{ secrets.SSL_KEY_STORE }}
          server.ssl.key-store-type: ${{ secrets.SSL_KEY_STORE_TYPE }}
          server.ssl.key-store-password: ${{ secrets.SSL_KEY_STORE_PASSWORD }}
          spring.datasource.url: ${{ secrets.DATASOURCE_URL }}
          spring.datasource.username: ${{ secrets.DATASOURCE_USERNAME }}
          spring.datasource.password: ${{ secrets.DATASOURCE_PASSWORD }}
          jwt.secret: ${{ secrets.JWT_SECRET }}
          oauth.github.client_id: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
          oauth.github.client_secret: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
          oauth.kakao.client_id: ${{ secrets.KAKAO_CLIENT_ID }}
          oauth.kakao.redirect_url: ${{ secrets.KAKAO_REDIRECT_URL }}

      - name: build with gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: docker image build
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gachagacha .
          docker push ${{ secrets.DOCKER_USERNAME }}/gachagacha

      - name: deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/gachagacha
            existing_container=$(docker ps -a -q -f name=gachagacha)
            if [ -n "$existing_container" ]; then
              sudo docker rm -f $existing_container
              sleep 3 
            fi
            sudo docker run -d --name gachagacha --network host -p 8080:8080 -e SPRING_PROFILES_ACTIVE=dev ${{ secrets.DOCKER_USERNAME }}/gachagacha:latest
